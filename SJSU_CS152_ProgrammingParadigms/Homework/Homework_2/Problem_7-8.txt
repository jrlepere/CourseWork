{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red106\green0\blue67;\red182\green113\blue255;}
\margl1440\margr1440\vieww14260\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 Problem 7\
\ulnone Assume the following declarations:\
- var x = 10\
- lazy val y = 1 / 0\
What are the values and types of the following expressions?\
1) if (false) 3\
	(): AnyVal\
2) if (false) if (true) 3 else 4\
	(): AnyVal\
3) if (x = 10) true else false\
	true: Boolean\
4) if (true) 1 else 1/0\
	1: Int\
5) if (if (true) false else true) true else false\
	false: Boolean\
6) y + 10\
	error\
7) println(\'93100\'94)\
	No value. Only prints the argument \'93100\'94 on the console. println is a procedure not a function.\
8) true || 3 == 1/0\
	true: Boolean\
9) false && (1 / 0 > 0)\
	false: Boolean\
\
\ul Problem 8\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone Assume the following declarations:\
- var x = 10\
What are the values and types of the following expressions?\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
1. \{1; 2; 3\} + \{4; 5; 6\}\
	9: Int\
2. \{1; 2; \{3; 4; \{5; 6\} \} \}\
	6: Int\
3. if (false) \{2; 3\} else \{4; \{5; 6\}\} + \{10; 20\}\
	26: Int\
4. \{10; 20\} + if (false) \{2; 3\} else \{4; \{5; 6\}\}\
	error\
5. \{var x = 20; var y = x + 1; x + y\}\
	41: Int\
6. // \{ var y = x + 1; var x = 5; var z = x + 1; x + y + z\}\
	error, unless the // was not there by accident. If this was not a mistake, then there is no value because this is a comment\
7. \{var x = 3; var y = \{var x = 9; x + 1\}; x + y\} // shadowning\
	13: Int\
8. \{
\b \cf2 def
\b0 \cf0  tri(n: Int): Int = 
\b \cf2 if
\b0 \cf0  (n == \cf3 0\cf0 ) \cf3 0\cf0  
\b \cf2 else
\b0 \cf0  n + tri(n - \cf3 1\cf0 ); tri(\cf3 5\cf0 ) \} // recursive blocks\
	15: Int\kerning1\expnd0\expndtw0 \
}