import java.util.LinkedList;
import java.util.List;
import java.util.Random;

/**
 * A class to define the specific eight puzzle problem.
 * @author JLepere2
 * @date 01/25/2018
 */
public class Problem {

	/**
	 * Creates a Problem instance.
	 * @param tileSequence a int[9] array representing the tile locations:
	 *    1 3 8
	 *    9 5 0  => [1,3,8,9,5,0,7,6,2]
	 *    7 6 2
	 *    where 0 is the blank tile.
	 * @param heuristicFunctionNumber the number of the heuristic function to use (1 or 2 for the eight puzzle project).
	 */
	public Problem(int[] tileSequence, int heuristicFunctionNumber) {
		this.tileLocations = tileSequence;
		this.heuristicFunctionNum = heuristicFunctionNumber;
	}
	
	/**
	 * Gets the initial child.
	 * @return the initial node.
	 */
	public Node getInitialChild() {
		if (this.tileLocations == null) {
			// Generate random sequence
			this.tileLocations = new int[9];
			for (int i = 0; i < this.tileLocations.length; i ++) {
				int v = gen.nextInt(this.tileLocations.length);
				boolean unique = true;
				for (int j = 0; j < i; j ++) {
					if (this.tileLocations[j] == v) {
						unique = false;
					}
				}
				if (unique) {
					this.tileLocations[i] = v;
				} else {
					i -= 1;
				}
			}
		}
		if (!validInitialSequence(this.tileLocations)) {
			this.tileLocations = null;
			return getInitialChild();
		}
		return new Node(new State(this.tileLocations), null, null);
	}
	
	/**
	 * Tests if the sequence is a valid starting sequence.
	 * @param sequence the sequence
	 * @return true if the sequence will result in a solution, false otherwise
	 */
	private boolean validInitialSequence(int[] sequence) {
		int inversionCount = 0;
		for (int i = 0; i < sequence.length; i ++) {
			for (int j = i + 1; j < sequence.length; j ++) {
				if (sequence[i] == 0 || sequence[j] == 0) continue;
				if (sequence[j] < sequence[i]) {
					inversionCount += 1;
				}
			}
		}
		if (inversionCount % 2 != 0) {
			return false;
		}
		return true;
	}
	
	/**
	 * Gets the possible Actions from this State
	 * @param s the state
	 * @return a list of actions possible for this state
	 */
	public List<IAction> getActions(State s) {
		List<IAction> actions = new LinkedList<>();
		MoveBlankTile up = new MoveBlankTile(MoveBlankTile.Direction.UP);
		MoveBlankTile right = new MoveBlankTile(MoveBlankTile.Direction.RIGHT);
		MoveBlankTile down = new MoveBlankTile(MoveBlankTile.Direction.DOWN);
		MoveBlankTile left = new MoveBlankTile(MoveBlankTile.Direction.LEFT);
		if (up.canExecute(s)) actions.add(up);
		if (right.canExecute(s)) actions.add(right);
		if (down.canExecute(s)) actions.add(down);
		if (left.canExecute(s)) actions.add(left);
		return actions;
	}
	
	/**
	 * Tests if the passed state is a goal state.
	 * @param s the state
	 * @return true if the state is a goal state, false otherwise
	 */
	public boolean isGoalState(State s) {
		int[] goal = {0,1,2,3,4,5,6,7,8};
		int[] tileLocations = s.getTileLocations();
		for (int i = 0; i < goal.length; i ++) {
			if (tileLocations[i] != goal[i]) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * The first heuristic function, i.e. the total number of misplaced tiles.
	 * @param s the state
	 * @return the result of executing the first heuristic function on the state
	 */
	private int heuristicOne(State s) {
		int[] tileLocations = s.getTileLocations();
		int misplacedTilesCount = 0;
		for (int i = 0; i < tileLocations.length; i ++) {
			if (tileLocations[i] != i) {
				misplacedTilesCount += 1;
			}
		}
		return misplacedTilesCount;
	}
	
	/**
	 * The second heuristic function, i.e. the sum of the distances of the tiles from their goal positions.
	 * @param s the state
	 * @return the result of executing the second heuristic function on the state
	 */
	private int heuristicTwo(State s) {
		
		class Distance {
			public static int getDistance(int i; int j) {
				
			}
		}
		
		int[] tileLocations = s.getTileLocations();
		for (int i = 0; i < tileLocations.length; i ++) {
			// get distance from i to position tileLocations[i]
		}
		return 0;
	}
	
	public int evaluateHeuristicFunction(State s) {
		if (heuristicFunctionNum == 1) {
			return heuristicOne(s);
		} else if (heuristicFunctionNum == 2) {
			return heuristicTwo(s);
		}
		throw new IllegalArgumentException(heuristicFunctionNum + " --> is not supported heuristic number.");
	}
	
	Random gen = new Random();
	private int[] tileLocations;
	private int heuristicFunctionNum;
	
}
