package testing;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import org.junit.Test;

import algorithm.AStar;
import algorithm.ISearchAlgorithm;
import algorithm.ResultObject;
import eight_puzzle.Problem;

public class DepthAnalysis {

	@Test
	public void fileTest() {
		ISearchAlgorithm aStar = new AStar();
		try {
			String result = "DEPTH,HEURISTIC_1_NODE_COUNT,HEURISTIC_2_NODE_COUNT";
			int depth = 0;
			String line;
			Scanner s = new Scanner(new File("100_Puzzles.txt"));
			while (s.hasNextLine()) {
				line = s.nextLine().trim();
				if (line.startsWith("Depth")) {
					depth = Integer.parseInt(line.split(" ")[1]);
				} else {
					int[] sequence = new int[9];
					for (int i = 0; i < sequence.length; i ++) {
						if (i == sequence.length - 1) {
							sequence[i] = Integer.parseInt(line.substring(i));
						} else {
							sequence[i] = Integer.parseInt(line.substring(i, i+1));
						}
					}
					ResultObject res1 = aStar.execute(new Problem(sequence,1));
					ResultObject res2 = aStar.execute(new Problem(sequence,2));
					assertEquals(depth, res1.getTotalDepth());
					assertEquals(depth, res2.getTotalDepth());
					//result += "\n" + depth + "," + res1.getNumberNodesGenerated() + "," + res2.getNumberNodesGenerated();
				}
			}
			s.close();
			//FileWriter w = new FileWriter(new File("depthAnalysis2.csv"));
			//w.write(result);
			//w.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	/*
	 * long[] h1GenNodes = new long[10];
		long[] h2GenNodes = new long[10];
		int[] countPerDepth = new int[10];
		int maxPerDepth = 10;
		
		ISearchAlgorithm aStar = new AStar();
		int h1Num = 1;
		int h2Num = 2;
		while (true) {
			System.out.println(Arrays.toString(countPerDepth));
			boolean exit = true;
			for (int i = 0; i < countPerDepth.length; i ++) {
				if (countPerDepth[i] < maxPerDepth) {
					exit = false;
				}
			}
			if (exit) break;
			ResultObject res = aStar.execute(new Problem(null,h2Num));
			int totalDepth = res.getTotalDepth();
			if ((totalDepth <= 20) && (totalDepth > 1) && (totalDepth % 2 == 0)) {
				int index = totalDepth/2 - 1;
				if (countPerDepth[index] > maxPerDepth) continue;
				h2GenNodes[index] += res.getNumberNodesGenerated();
				h1GenNodes[index] += aStar.execute(new Problem(res.getInitialState().getTileLocations(),h1Num)).getNumberNodesGenerated();
				countPerDepth[index] += 1;
			}
		}
		System.out.println(h1GenNodes);
		System.out.println(h2GenNodes);
	 */

}
