Jake Lepere- DriveJohnny Chi- Scribe10-30-2015lab10PartA1. importjava.io.File;importjava.io.FileNotFoundException;importjava.util.Scanner;publicclassDict{publicstaticvoidmain(String[]args)throwsFileNotFoundException{Scannerin=newScanner(newFile(args[0]));while(in.hasNext()){System.out.println(in.next());}}}2. /t-tab    /n-new line    /r- carriage return   This in short skips over white spaces in the output3. in.useDelimiter("[a-zA-Z0-9_]");4. importjavaioFileimportjavaioFileNotFoundExceptionimportjavautilScannerpublicclassDictpublicstaticvoidmainStringargsthrowsFileNotFoundExceptionScannerinnewScannernewFileargs0inuseDelimiterazAZ09_whileinhasNextSystemoutprintlninnext5. 1: import2: java3: io4: File5: import6: java7: io8: FileNotFoundException9: import10: java11: util12: Scanner13: public14: class15: Dict16: public17: static18: void19: main20: String21: args22: throws23: FileNotFoundException24: Scanner25: in26: new27: Scanner28: new29: File30: args31: 032: in33: useDelimiter53: int54: lineNumber55: 056: while57: in58: hasNext59: lineNumber60: String61: line62: in63: next64: Scanner65: in266: new67: Scanner68: line69: useDelimiter89: while90: in291: hasNext92: System93: out94: println95: lineNumber96: in297: next6. We should use a treeMap and a hashSet7. TreeMap<Integer, HashSet<String>> map = new TreeMap<>();8. 1: import1: java1: io1: File2: import2: java2: io2: FileNotFoundException3: import3: java3: util3: HashMap4: import4: java4: util4: Scanner5: import5: java5: util5: TreeSet7: public7: class7: Dict9: public9: static9: void9: main9: String9: args9: throws9: FileNotFoundException11: Scanner11: in11: new11: Scanner11: new11: File11: args11: 012: in12: useDelimiter14: HashMap14: String14: TreeSet14: Integer14: index14: new14: HashMap14: String14: TreeSet14: Integer15: int15: lineNumber15: 016: while16: in16: hasNextLine17: lineNumber18: TreeSet18: Integer18: lines18: new18: TreeSet19: lines19: add19: lineNumber20: String20: line20: in20: nextLine21: Scanner21: in221: new21: Scanner21: line21: useDelimiter22: while22: in222: hasNext23: String23: identifier23: in223: next24: if24: identifier24: equals25: index25: put25: identifier25: lines26: System26: out26: println26: lineNumber26: identifier9. We aren’t updated the Set of Integers10. We get an error11. We fix this by checking if the map already contains this identifier and if so we update the set of lines.12. We checked if the index already contained a set for the given identifier. If it didnt we make a new TreeSet and if it did not we extracted the TreeSet and added the line number to the set.13. We should either make a new set or add to the set.14. String identifier = in2.next();				if (!identifier.equals("")) {					if (index.get(identifier) == null) {						TreeSet<Integer> set = new TreeSet<>();						set.add(lineNumber);						index.put(identifier, set);					} else {						TreeSet<Integer> set = index.get(identifier);						set.add(lineNumber);						index.put(identifier, set);					}				}15. HashMap: 3 14 FileNotFoundException: 2 9 main: 9 String: 9 14 18 21 35 while: 16 20 put: 26 30 java: 1 2 3 4 5 TreeSet: 5 14 24 28 else: 27 if: 22 23 add: 25 29 new: 11 14 19 24 identifier: 21 22 23 26 28 30 static: 9 void: 9 in: 11 12 16 18 io: 1 2 index: 14 23 26 28 30 35 37 useDelimiter: 12 19 hasNext: 20 throws: 9 in2: 19 20 21 0: 11 15 util: 3 4 5 null: 23 lineNumber: 15 17 25 29 File: 1 11 next: 21 Scanner: 4 11 19 import: 1 2 3 4 5 line: 18 19 for: 35 37 System: 36 38 40 out: 36 38 40 println: 40 public: 7 9 get: 23 28 37 class: 7 keySet: 35 set: 24 25 26 28 29 30 nextLine: 18 i: 37 38 int: 15 args: 9 11 Integer: 14 24 28 37 print: 36 38 s: 35 36 37 Dict: 7 hasNextLine: 16 equals: 2216. We already did that.17. This is the output for 1518. Done19. Done20. Arrays: 3 16 next: 32 Scanner: 6 13 30 HashMap: 4 25 line: 29 30 FileNotFoundException: 2 11 main: 11 String: 11 16 25 29 32 34 55 asList: 16 put: 44 48 System: 56 58 60 out: 56 58 60 println: 60 java: 1 2 3 4 5 6 7 34 35 TreeSet: 7 25 42 46 get: 41 46 57 javaReserved: 33 36 39 close: 53 62 keySet: 55 HashSet: 5 16 add: 43 47 identifier: 32 35 40 41 44 46 48 set: 42 43 44 46 47 48 in: 13 14 27 29 62 nextLine: 29 io: 1 2 false: 33 index: 25 41 44 46 48 55 57 i: 57 58 useDelimiter: 14 30 hasNext: 31 in2: 30 31 32 53 args: 11 13 0: 13 26 Integer: 25 42 46 57 print: 56 58 s: 55 56 57 util: 3 4 5 6 7 null: 41 reserved: 16 34 Dict: 9 hasNextLine: 27 equals: 35 40 true: 36 lineNumber: 26 28 43 47 File: 1 1321. import java.io.File;import java.io.FileNotFoundException;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.Scanner;import java.util.TreeSet;public class Dict {	public static void main(String[] args) throws FileNotFoundException	{		Scanner in = new Scanner(new File(args[0]));		in.useDelimiter("[^A-Za-z0-9_]+|A|Za|z0|9|_");				HashSet<String> reserved = new HashSet<>(Arrays.asList("abstract", "continue", "for",				   "new", "switch", "assert", "default", "goto", "package", "synchronized",				   "boolean", "do", "if", "private", "this", "break", "double", "implements",				   "protected", "throw", "byte", "else", "import", "public", "throws", "case",				   "enum", "instanceof", "return", "transient", "catch", "extends", "int",				   "short", "try", "char", "final", "interface", "static", "void", "class",				   "finally", "long", "strictfp", "volatile", "const", "float", "native",				   "super", "while"));				HashMap<String, TreeSet<Integer>> index = new HashMap<String, TreeSet<Integer>>();		int lineNumber = 0;		while (in.hasNextLine()) {			lineNumber++;			String line = in.nextLine();			Scanner in2 = new Scanner(line).useDelimiter("[^A-Za-z0-9_]+|A|Za|z0|9|_");			while (in2.hasNext()) {				String identifier = in2.next();				boolean javaReserved = false;				for (String java: reserved) {					if (java.equals(identifier)) {						javaReserved = true;					}				}				if (!javaReserved) {					if (!identifier.equals("")) {						if (index.get(identifier) == null) {							TreeSet<Integer> set = new TreeSet<>();							set.add(lineNumber);							index.put(identifier, set);						} else {							TreeSet<Integer> set = index.get(identifier);							set.add(lineNumber);							index.put(identifier, set);						}					}				}			}			in2.close();		}		for (String s : index.keySet()) {			System.out.print(s + ": ");			for (Integer i : index.get(s)) {				System.out.print(i + " ");			}			System.out.println();		}		in.close();	}}